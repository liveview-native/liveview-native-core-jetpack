plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'org.mozilla.rust-android-gradle.rust-android' version '0.9.3'
}


android {
    namespace 'org.phoenixframework.liveview_native_core_jetpack'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName core_jetpack_lib_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    ndkVersion '25.1.8937393'
}

// Configuring Rust Cargo build
// https://github.com/mozilla/rust-android-gradle
cargo {
    module = "../jni_bindings"
    libname = "liveview_native_core"
    targets = ["arm", "arm64", "x86", "x86_64", "darwin-x86-64", "darwin-aarch64"]
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
}


afterEvaluate {
    android.libraryVariants.each { variant ->
        publishing.publications.create(variant.name, MavenPublication) {
            from components.findByName(variant.name)

            groupId = 'org.phoenixframework'
            artifactId = 'liveview-native-core-jetpack'
            version = core_jetpack_lib_version
        }
    }
//    publishing {
//        publications {
//            maven(MavenPublication) {
//                groupId = 'org.phoenixframework'
//                artifactId = 'liveview-native-core-jetpack'
//                version = core_jetpack_lib_version
//                from components.release
//            }
//        }
//    }
}

// Running cargo command before build
tasks.configureEach { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}

// Configuring Java Lib Path in order to find the native library before running the Unit Tests
tasks.withType(Test).configureEach { task ->
    task.doFirst {
        File rustJniLibsForDesktopDir = new File("${projectDir}/build/rustJniLibs/desktop")
        File[] archTypesSubdirs = rustJniLibsForDesktopDir.listFiles()
        for (dir in archTypesSubdirs) {
            // Selecting the proper JNI lib file in according to the architecture
            // e.g.: darwin-aarch64, darwin-x86-64
            String arch = System.getProperty('os.arch').replace("_", "-")
            if (dir.isDirectory() && dir.name.contains(arch)) {
                systemProperty "java.library.path", dir.absolutePath
                break
            }
        }
    }
}